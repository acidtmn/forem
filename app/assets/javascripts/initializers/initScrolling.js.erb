function initScrolling() {
  checkIfNearBottomOfPage();
}

function checkIfNearBottomOfPage() {
  var elCheck = document.getElementById("index-container");

  if (elCheck) {
    var publicSearchKey = '<%= ALGOLIASEARCH_PUBLIC_SEARCH_ONLY_KEY %>';
    client = algoliasearch('<%= ApplicationConfig["ALGOLIASEARCH_APPLICATION_ID"] %>', publicSearchKey);

    initScrolling.called = true;
    if (document.getElementsByClassName("single-article").length < 2 || location.search.indexOf("q=") > -1 ) {
      document.getElementById("loading-articles").style.display = "none";
      done = true;
    } else {
      document.getElementById("loading-articles").style.display = "block";
    }
    fetchNextPageIfNearBottom();
    setInterval(function(){
      fetchNextPageIfNearBottom();
    },210)
  }
}

function fetchNextPageIfNearBottom() {
  var indexContainer = document.getElementById("index-container");
  var elCheck =  indexContainer && !document.getElementById("query-wrapper");
  if (!elCheck) {
    return;
  }

  var indexWhich = indexContainer.dataset.which;

  var fetchCallback;
  var scrollableElemId;
  if (indexWhich == "podcast-episodes") {
    scrollableElemId = "articles-list";
    fetchCallback = function() {
      fetchNextPodcastPage(indexContainer);
    };
  } else if (indexWhich == "videos") {
    scrollableElemId = "video-collection";
    fetchCallback = function() {
      fetchNextVideoPage(indexContainer);
    };
  } else if (indexWhich == "followers") {
    fetchNextFollowersPage(el);
  } else if (indexWhich == "following") {
    fetchNextFollowingPage(el);
  } else {
    scrollableElemId = "articles-list";
    fetchCallback = function() {
      algoliaPaginate(indexContainer.dataset.algoliaTag);
    };
  }

  var scrollableElem = document.getElementById(scrollableElemId);

  if ( !done && !fetching && (window.scrollY) > (scrollableElem.scrollHeight - 3700) ) {
    fetching = true;
    fetchCallback();
  }
}

function fetchNext(el, endpoint, insertCallback){
  var indexParams = JSON.parse(el.dataset.params);
  var urlParams = Object.keys(indexParams).map(function(k) {
    return encodeURIComponent(k) + "=" + encodeURIComponent(indexParams[k])
  }).join('&');
  if (urlParams.indexOf("q=") > -1 ) {
    return;
  }
  var fetchUrl = (endpoint+"?page="+nextPage+"&"+urlParams+"&signature="+parseInt(Date.now()/400000)).replace("&&","&");
  window.fetch(fetchUrl)
  .then(function(response) {
    response.json().then(function(entries) {
      nextPage += 1;
      insertCallback(entries);
      if (entries.length == 0) {
        document.getElementById("loading-articles").style.display = "none";
        done = true;
      }
    });
  }).catch(function(err) {
    console.log(err);
  });
}

function insertNext(params, buildCallback) {
  return function(entries) {
    var list = document.getElementById(params.listId || "sublist");
    var newFollowersHTML = "";
    entries.forEach(function(entry){
      var existingEl = document.getElementById((params.elId || "element") + "-" + entry.id);
      if(!existingEl) {
        var newHTML = buildCallback(entry)
        newFollowersHTML += newHTML
      }
    });

    var distanceFromBottom = document.documentElement.scrollHeight - document.body.scrollTop;
    var newNode = document.createElement("div");
    newNode.innerHTML = newFollowersHTML;
    var singleArticles = document.getElementsByClassName("single-article");
    var lastElement = singleArticles[singleArticles.length - 1];
    insertAfter(newNode, lastElement);
    if (nextPage > 0) {
      fetching = false;
    }
  }
}

function fetchNextFollowingPage(el){
  var indexParams = JSON.parse(el.dataset.params);
  var action = indexParams.action;
  if (action.includes("users")){
    fetchNext(el, "/api/follows/following_users", insertNext({ elId: "follows" }, buildFollowsHTML));
  } else if (action.includes("podcasts")){
    fetchNext(el, "/api/follows/following_podcasts", insertNext({ elId: "podcast" }, buildFollowsHTML));
  } else if (action.includes("organizations")){
    fetchNext(el, "/api/follows/following_organizations", insertNext({ elId: "organization" }, buildFollowsHTML));
  } else {
    fetchNext(el, "/api/follows/following_tags", insertNext({ elId: "tag" }, buildTagsHTML));
  }
}

function fetchNextFollowersPage(el){
  fetchNext(el, "/api/follows/followers", insertNext({ listId: "subfollowers", elId: "follower" }, buildFollowsHTML));
}

function buildFollowsHTML(follows) {
  return `<div id="follows-${follows.id}" class="single-article">
            <a href="${follows.path$}" class="block-link">
              <h2>
                <img alt="${follows.username} profile image" src="${follows.profile_image}" />
                ${follows.name}
                <span class="dashboard-username">@${follows.username}</span>
              </h2>
            </a>
          </div>`;
}

var negativeFollow = -1;
function buildTagsHTML(tag) {
  var tagHTML = '';
  if (tag.points < 0 && negativeFollow === -1){
    tagHTML += '<h2>Negative Tags (anti-follows)</h2>';
    negativeFollow = 0;
  }
  return tagHTML +
    `<div id="tag-${tag.id}" class="single-article" style="border-color:${tag.color};box-shadow: 3px 3px 0px ${tag.color}">
        <h2>
          <a href="/t/${tag.name}">
            ${tag.name}
          </a>
          <form class="edit_follow" id="edit_follow_${tag.id}" action="/follows/${tag.id}" accept-charset="UTF-8" method="post">
            <input name="utf8" type="hidden" value="âœ“">
            <input type="hidden" name="_method" value="patch">
            <input type="hidden" name="authenticity_token" value="${tag.token}">
            <label for="follow_points">Follow Weight:</label>
            <input step="any" required="required" type="number" value="${tag.points}" name="follow[points]" id="follow_points">
            <input type="submit" name="commit" value="Submit">
          </form>
        </h2>
      </div>`;
}

function fetchNextVideoPage(el){
  fetchNext(el, "/api/videos", insertVideos)
}

function insertVideos(video_articles) {
  var list = document.getElementById("subvideos");
  var newVideosHTML = "";
  video_articles.forEach(function(video_article){
    var existingEl = document.getElementById("video-article-"+video_article.id);
    if(!existingEl) {
      var newHTML = buildVideoArticleHTML(video_article)
      newVideosHTML += newHTML
    }
  });

  var distanceFromBottom = document.documentElement.scrollHeight - document.body.scrollTop;
  var newNode = document.createElement("div");
  newNode.innerHTML = newVideosHTML;
  newNode.className += "video-collection"
  var singleArticles = document.getElementsByClassName("single-article");
  var lastElement = singleArticles[singleArticles.length - 1];
  insertAfter(newNode, lastElement);
  if (nextPage > 0) {
    fetching = false;
  }
}

function buildVideoArticleHTML(video_article) {
  return '<a class="single-video-article single-article" href="'+video_article.path+'" id="video-article-'+video_article.id+'">\
            <div class="video-image" style="background-image: url('+video_article.cloudinary_video_url+')">\
              <span class="video-timestamp">'+video_article.video_duration_in_minutes+'</span>\
            </div>\
            <p><strong>'+video_article.title+'</strong></p>\
           <p>'+video_article.user.name+'</p>\
          </a>';
}

function fetchNextPodcastPage(el){
  fetchNext(el, "/api/podcast_episodes", insertArticles)
}

function insertArticles(articles) {
  var list = document.getElementById("substories");
  var newArticlesHTML = "";
  var el = document.getElementById("home-articles-object")
  if (el) {el.outerHTML = "";}
  articles.forEach(function(article){
    var existingEl = document.getElementById("article-link-"+article.id);
    if ( existingEl &&
      existingEl.parentElement &&
      existingEl.parentElement.classList.contains('single-article-small-pic') &&
      !document.getElementById("video-player-"+article.id)) {
      existingEl.parentElement.outerHTML = buildArticleHTML(article);
    } else if(!existingEl) {
      var newHTML = buildArticleHTML(article)
      newArticlesHTML += newHTML
      initializeReadingListIcons();
    }
  });
  var distanceFromBottom = document.documentElement.scrollHeight - document.body.scrollTop;
  var newNode = document.createElement("div");
  newNode.innerHTML = newArticlesHTML;
  var singleArticles = document.getElementsByClassName("single-article");
  var lastElement = singleArticles[singleArticles.length - 1];
  insertAfter(newNode, lastElement);
  if (nextPage > 0) {
    fetching = false;
  }
}

function algoliaPaginate(tag){
  var filters = [];
  if (tag && tag.length > 0) {
    filters.push(tag);
  }

  var searchObj = {
      hitsPerPage: 15,
      page: nextPage,
      attributesToHighlight: [],
      tagFilters: filters,
  }

  var homeEl = document.getElementById("index-container");
  if (homeEl.dataset.feed === "base-feed") {
    paginationArticlesIndex = client.initIndex('ordered_articles_<%= Rails.env %>');
  } else if (homeEl.dataset.feed === "latest") {
    paginationArticlesIndex = client.initIndex('ordered_articles_by_published_at_<%= Rails.env %>');
  } else {
    searchObj["filters"] = ('published_at_int > ' + homeEl.dataset.articlesSince);
    paginationArticlesIndex = client.initIndex('ordered_articles_by_positive_reactions_count_<%= Rails.env %>');
  }

  paginationArticlesIndex.search("*", searchObj)
  .then(function searchDone(content) {
    nextPage += 1;
    insertArticles(content.hits);
    const checkBlockedContentEvent = new CustomEvent('checkBlockedContent')
    window.dispatchEvent(checkBlockedContentEvent)
    if (content.hits.length == 0) {
      document.getElementById("loading-articles").style.display = "none"
      done = true;
    }
  });
}
