<% title "Moderating " + @moderatable.title %>

<% cache(cache_key_heroku_slug("mod-styling")) do %>
  <style>
    <%= Rails.application.assets["moderators.css"].to_s.html_safe %>
  </style>
<% end %>

<%= javascript_packs_with_chunks_tag "actionsPanel", defer: true %>

<div class="container mod-container">
  <header class="top-header">
    <h1>Moderate Post</h1>
    <h2>Rate the quality of this post</h2>
    <button class="close-actions-panel circle centered-icon" type="button" title="Close moderator actions panel">
      <%= inline_svg_tag("chevron-right.svg", aria: false) %>
    </button>
  </header>
  <div class="reactions-container">
    <div class="thumb-reactions-container">
      <button class="reaction-button <%= Reaction.cached_any_reactions_for?(@moderatable, current_user, "thumbsup") ? "reacted" : "" %>"
              data-reactable-id="<%= @moderatable.id %>"
              data-category="thumbsup"
              data-reactable-type="<%= @moderatable.class.name %>">
        <div class="reaction-button-circle">
          <%= image_tag("emoji/emoji-one-thumbs-up-gray.png", alt: "Thumbs up emoji", class: "emoji-grey") %>
          <img class="reacted-emoji" src="<%= asset_path("emoji/emoji-one-thumbs-up.png") %>" alt="Thumbs up emoji" />
          <%= inline_svg_tag("checkmark.svg", aria: true, class: "crayons-icon reaction-checkmark", title: "Checkmark") %>
        </div>
        <span class="vote-text">High Quality</span>
      </button>
      <button class="reaction-button <%= Reaction.cached_any_reactions_for?(@moderatable, current_user, "thumbsdown") ? "reacted" : "" %>"
              data-reactable-id="<%= @moderatable.id %>"
              data-category="thumbsdown"
              data-reactable-type="<%= @moderatable.class.name %>">
        <div class="reaction-button-circle">
          <%= image_tag("emoji/emoji-one-thumbs-down-gray.png", alt: "Thumbs down emoji", class: "emoji-grey") %>
          <img class="reacted-emoji downvote" src="<%= asset_path("emoji/emoji-one-thumbs-down.png") %>" alt="Thumbs down emoji" />
          <%= inline_svg_tag("checkmark.svg", aria: true, class: "crayons-icon reaction-checkmark", title: "Checkmark") %>
        </div>
        <span class="vote-text">Low Quality</span>
      </button>
    </div>
    <button class="reaction-vomit-button <%= Reaction.cached_any_reactions_for?(@moderatable, current_user, "vomit") ? "reacted" : "" %>"
            data-reactable-id="<%= @moderatable.id %>"
            data-category="vomit"
            data-reactable-type="<%= @moderatable.class.name %>">
      <%= image_tag("emoji/emoji-one-nausea-face-gray.png", alt: "Nausea face emoji", class: "emoji-grey") %>
      <img class="reacted-emoji" src="<%= asset_path("emoji/emoji-one-nausea-face.png") %>" alt="Nausea down emoji" />
      <span></span>
      <%= inline_svg_tag("checkmark.svg", aria: true, class: "crayons-icon vomit-checkmark", title: "Checkmark") %>
    </button>
    <span class="how-this-works-section">How does this work?</span>
  </div>
  <%# Rating buttons and options go here, to be added by Arit %>
  <div class="other-things-container">
    <header class="other-things">
      <h1>Other things you can do</h1>
    </header>
    <button class="other-things-btn adjust-tags" type="button" data-other-things-type="adjust-tags">
      <div class="label-wrapper">
        <div class="icon circle centered-icon">
          <%= inline_svg_tag("mod-filled.svg", aria: true, title: "Adjust tags") %>
        </div>
        <header>
          <h2>Adjust tags</h2>
          <h3>Add or remove tags</h3>
        </header>
      </div>
      <div class="toggle-chevron-container">
        <%= inline_svg_tag("chevron-toggle.svg", aria: false) %>
      </div>
    </button>
    <% if @moderatable.class.name == "Article" %>
      <% @rating_vote = RatingVote.where(article_id: @moderatable.id, user_id: current_user.id).first %>
      <button class="other-things-btn set-experience" type="button" data-other-things-type="set-experience">
        <div class="label-wrapper">
          <div class="icon circle centered-icon">
            <%= inline_svg_tag("book.svg", aria: false) %>
          </div>
          <header>
            <h2>Set experience level</h2>
            <h3>Curate the most appropriate audience for this post</h3>
          </header>
        </div>
        <div class="toggle-chevron-container">
          <%= inline_svg_tag("chevron-toggle.svg", aria: false) %>
        </div>
      </button>
      <div class="set-experience-options hidden">
        <% rating_hash = { "Expert" => 5, "Advanced" => 4, "Mid-level" => 3, "Beginner" => 2, "Novice" => 1 } %>
        <% rating_hash.each do |rating_name, rating_level| %>
          <button
            value="<%= rating_level %>"
            name="rating_vote_<%= rating_level %>"
            id="js__rating__vote__<%= rating_level %>"
            class="level-rating-button<%= " selected" if @rating_vote&.rating == rating_level.to_f %>"
            data-user-id="<%= current_user.id %>"
            data-article-id="<%= @moderatable.id %>"
            data-group="experience_level">
            <div class="level-rating-content">
              <span class="level-rating-number"><%= rating_level %></span>
              <span class="level-rating-text"><%= rating_name %></span>
            </div>
            <%= inline_svg_tag("checkmark.svg", aria: true, class: "crayons-icon", title: "Checkmark") %>
          </button>
        <% end %>
        <span class="how-this-works-section">How does this work?</span>
      </div>
    <% end %>
  </div>
  <div class="bottom-actions">
    <button type="button">Flag user</button>
  </div>
</div>

<script defer>
  setTimeout(function() {
    var butts = document.querySelectorAll('.reaction-button, .reaction-vomit-button');
    for (var i = 0; i < butts.length; i++) {
      var butt = butts[i];
      butt.onclick = function(event) {
        event.preventDefault();
        var thisButt = this;
        thisButt.classList.add('reacted');

        function successCb(response) {
          if (response.result === 'create') {
            thisButt.classList.add('reacted');
          } else {
            thisButt.classList.remove('reacted');
          }
        }

        var formData = new FormData();
        formData.append('reactable_type', thisButt.dataset.reactableType);
        formData.append('category', thisButt.dataset.category);
        formData.append('reactable_id', thisButt.dataset.reactableId);

        getCsrfToken()
          .then(sendFetch('reaction-creation', formData))
          .then(function(response) {
            if (response.status === 200) {
              response.json().then(successCb);
            }
          });
      };
    }

    // set actions panel heights
    document.documentElement.style.height = "100%";
    document.body.style.cssText = 'height: 100%; margin: 0; padding-top: 0;';
    document.getElementById('page-content').style.cssText = 'margin-top: 0 !important; margin-bottom: 0;';

    // toggle "Other Things" DropDowns
    function toggleOtherThings(type) {
      if (type === 'set-experience') {
        document.querySelector('.set-experience-options').classList.toggle('hidden');
      } else if (type === 'adjust-tags') {
        document.querySelector('.adjust-tags-options').classList.toggle('hidden');
      }
    }

    //  rotate chevrons & toggle dropdowns
    document.querySelectorAll('button.other-things-btn').forEach((btn) => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        let clickedBtn = e.currentTarget;
        clickedBtn.querySelector('.label-wrapper > .icon').classList.toggle('hidden');
        clickedBtn.querySelector('.toggle-chevron-container').classList.toggle('rotated');

        let btnType = clickedBtn.dataset.otherThingsType;
        toggleOtherThings(btnType);
      })
    });

    function clearExpLevels() {
      Array.from(
        document.getElementsByClassName('level-rating-button selected')
      ).forEach((el) => {
        el.classList.remove('selected');
      });
    }

    function updateExperienceLevel(currentUserId, articleId, rating, group){
      fetch('/rating_votes', {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").content,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: currentUserId,
          article_id: articleId,
          rating: rating,
          group: group,
        }),
        credentials: 'same-origin'
      })
        .then(response => response.json()
          .then(json => {
            if (json.result === 'Success') {
              clearExpLevels();
              document.getElementById(`js__rating__vote__${rating}`).classList.add('selected');
            } else {
              alert(json.error)
            }
          })
          .catch(error => {
            alert(error);
          }))
    }

    document.querySelectorAll('.level-rating-button').forEach(btn => {
      btn.addEventListener('click', function () {
        updateExperienceLevel(
          btn.dataset.userId,
          btn.dataset.articleId,
          btn.value,
          btn.dataset.group
        );
      });
    });
  }, 200)
</script>
