{
  "openapi": "3.0.3",
  "info": {
    "title": "Forem API V1",
    "version": "1.0.0",
    "description": "Access Forem articles, users and other resources via API.\n        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).\n        All endpoints can be accessed with the 'api-key' header and a accept header, but\n        some of them are accessible publicly without authentication.\n\n        Dates and date times, unless otherwise specified, must be in\n        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format."
  },
  "paths": {
    "/api/articles": {
      "get": {
        "summary": "Published articles",
        "security": [

        ],
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to retrieve a list of articles.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\nBy default it will return featured, published articles ordered\nby descending popularity.\n\nIt supports pagination, each page will contain `30` articles by default.",
        "operationId": "getArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve articles that contain the requested tag. Articles\nwill be ordered by descending popularity.This parameter can be used in conjuction with `top`.",
            "schema": {
              "type": "string"
            },
            "example": "discuss"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve articles with any of the comma-separated tags.\nArticles will be ordered by descending popularity.",
            "schema": {
              "type": "string"
            },
            "example": "javascript, css"
          },
          {
            "name": "tags_exclude",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve articles that do _not_ contain _any_\nof comma-separated tags. Articles will be ordered by descending popularity.",
            "schema": {
              "type": "string"
            },
            "example": "node, java"
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve articles belonging\n            to a User or Organization ordered by descending publication date.\n            If `state=all` the number of items returned will be `1000` instead of the default `30`.\n            This parameter can be used in conjuction with `state`.",
            "schema": {
              "type": "string"
            },
            "example": "ben"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Using this parameter will allow the client to check which articles are fresh or rising.\n            If `state=fresh` the server will return fresh articles.\n            If `state=rising` the server will return rising articles.\n            This param can be used in conjuction with `username`, only if set to `all`.",
            "schema": {
              "type": "string",
              "enum": [
                "fresh",
                "rising",
                "all"
              ]
            },
            "example": "fresh"
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "description": "Using this parameter will allow the client to return the most popular articles\nin the last `N` days.\n`top` indicates the number of days since publication of the articles returned.\nThis param can be used in conjuction with `tag`.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 2
          },
          {
            "name": "collection_id",
            "in": "query",
            "required": false,
            "description": "Adding this will allow the client to return the list of articles\nbelonging to the requested collection, ordered by ascending publication date.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 99
          }
        ],
        "responses": {
          "200": {
            "description": "A List of Articles",
            "content": {
              "application/json": {
                "example": [
                  {
                    "type_of": "article",
                    "id": 372,
                    "title": "The Soldier's Art1",
                    "description": "Kinfolk cornhole irony twee neutra narwhal you probably haven't heard of them. Jean shorts squid food...",
                    "readable_publish_date": "Jan 11",
                    "slug": "the-soldiers-art1-3ljm",
                    "path": "/username1/the-soldiers-art1-3ljm",
                    "url": "http://localhost:3000/username1/the-soldiers-art1-3ljm",
                    "comments_count": 0,
                    "public_reactions_count": 0,
                    "collection_id": null,
                    "published_timestamp": "2023-01-11T00:29:37Z",
                    "positive_reactions_count": 0,
                    "cover_image": "http://localhost:3000/assets/11-f4a704eef06d25d2d2fa2026ef08f1089754beaf5b6ee01160115d3c36ed3d34.png",
                    "social_image": "http://localhost:3000/assets/11-f4a704eef06d25d2d2fa2026ef08f1089754beaf5b6ee01160115d3c36ed3d34.png",
                    "canonical_url": "http://localhost:3000/username1/the-soldiers-art1-3ljm",
                    "created_at": "2023-01-11T00:29:37Z",
                    "edited_at": null,
                    "crossposted_at": null,
                    "published_at": "2023-01-11T00:29:37Z",
                    "last_comment_at": "2023-01-11T00:29:37Z",
                    "reading_time_minutes": 1,
                    "tag_list": [
                      "discuss"
                    ],
                    "tags": "discuss",
                    "user": {
                      "name": "Andrew \"Jamey\" \\:/ Hartmann",
                      "username": "username1",
                      "twitter_username": "twitter1",
                      "github_username": "github1",
                      "user_id": 853,
                      "website_url": null,
                      "profile_image": "/uploads/user/profile_image/853/4a622966-b7e4-49a0-9d94-3fd50a164c10.jpeg",
                      "profile_image_90": "/uploads/user/profile_image/853/4a622966-b7e4-49a0-9d94-3fd50a164c10.jpeg"
                    },
                    "organization": {
                      "name": "Kautzer, Gibson and Ebert",
                      "username": "org1",
                      "slug": "org1",
                      "profile_image": "/uploads/organization/profile_image/132/66178223-5f38-433a-bf47-a53f41ba4a19.png",
                      "profile_image_90": "/uploads/organization/profile_image/132/66178223-5f38-433a-bf47-a53f41ba4a19.png"
                    },
                    "flare_tag": {
                      "name": "discuss",
                      "bg_color_hex": "#000000",
                      "text_color_hex": "#ffffff"
                    }
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/{id}": {
      "get": {
        "summary": "Published article by id",
        "security": [

        ],
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to retrieve a single published article given its `id`.",
        "operationId": "getArticleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Article",
            "content": {
              "application/json": {
                "example": {
                  "type_of": "article",
                  "id": 373,
                  "title": "That Hideous Strength2",
                  "description": "Ethical cronut crucifix five dollar toast selvage truffaut actually ramps. Selfies offal whatever...",
                  "readable_publish_date": "Jan 11",
                  "slug": "that-hideous-strength2-1j01",
                  "path": "/username2/that-hideous-strength2-1j01",
                  "url": "http://localhost:3000/username2/that-hideous-strength2-1j01",
                  "comments_count": 0,
                  "public_reactions_count": 0,
                  "collection_id": null,
                  "published_timestamp": "2023-01-11T00:29:37Z",
                  "positive_reactions_count": 0,
                  "cover_image": "http://localhost:3000/assets/31-2a89a91581ce9080fed8d62dd9c70a3fd5f92472da8c023e7b29256e04811b2e.png",
                  "social_image": "http://localhost:3000/assets/31-2a89a91581ce9080fed8d62dd9c70a3fd5f92472da8c023e7b29256e04811b2e.png",
                  "canonical_url": "http://localhost:3000/username2/that-hideous-strength2-1j01",
                  "created_at": "2023-01-11T00:29:37Z",
                  "edited_at": null,
                  "crossposted_at": null,
                  "published_at": "2023-01-11T00:29:37Z",
                  "last_comment_at": "2023-01-11T00:29:37Z",
                  "reading_time_minutes": 1,
                  "tag_list": "discuss",
                  "tags": [
                    "discuss"
                  ],
                  "body_html": "<p>Ethical cronut crucifix five dollar toast selvage truffaut actually ramps. Selfies offal whatever kinfolk tofu stumptown. Hella cliche pabst.</p>\n\n<p>Banjo pop-up mlkshk tumblr street direct trade. Cold-pressed slow-carb muggle magic church-key fanny pack next level dreamcatcher street.</p>\n\n",
                  "body_markdown": "---\ntitle: That Hideous Strength2\npublished: true\ntags: discuss\ndate: \nseries: \ncanonical_url: \n\n---\n\nEthical cronut crucifix five dollar toast selvage truffaut actually ramps. Selfies offal whatever kinfolk tofu stumptown. Hella cliche pabst.\n\n\nBanjo pop-up mlkshk tumblr street direct trade. Cold-pressed slow-carb muggle magic church-key fanny pack next level dreamcatcher street.\n\n",
                  "user": {
                    "name": "Patrina \"Dario\" \\:/ Mayert",
                    "username": "username2",
                    "twitter_username": "twitter2",
                    "github_username": "github2",
                    "user_id": 854,
                    "website_url": null,
                    "profile_image": "/uploads/user/profile_image/854/ce95b78c-7f18-4e65-87c3-9a83b29b6039.jpeg",
                    "profile_image_90": "/uploads/user/profile_image/854/ce95b78c-7f18-4e65-87c3-9a83b29b6039.jpeg"
                  },
                  "flare_tag": {
                    "name": "discuss",
                    "bg_color_hex": "#000000",
                    "text_color_hex": "#ffffff"
                  }
                },
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an article by id",
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to update an existing article.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.",
        "operationId": "getArticleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the user to unpublish.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "An Article",
            "content": {
              "application/json": {
                "example": {
                  "type_of": "article",
                  "id": 374,
                  "title": "Dulce et Decorum Est3",
                  "description": "Retro polaroid thundercats tattooed chicharrones sriracha squid truffaut. Pitchfork celiac polaroid....",
                  "readable_publish_date": "Jan 11",
                  "slug": "dulce-et-decorum-est3-481b",
                  "path": "/username3/dulce-et-decorum-est3-481b",
                  "url": "http://localhost:3000/username3/dulce-et-decorum-est3-481b",
                  "comments_count": 0,
                  "public_reactions_count": 0,
                  "collection_id": null,
                  "published_timestamp": "2023-01-11T00:29:38Z",
                  "positive_reactions_count": 0,
                  "cover_image": "http://localhost:3000/assets/39-20fc2599938fbd7c41146577147aa7c6925e3b8ff069aba58c9304bc1b944cf1.png",
                  "social_image": "http://localhost:3000/assets/39-20fc2599938fbd7c41146577147aa7c6925e3b8ff069aba58c9304bc1b944cf1.png",
                  "canonical_url": "http://localhost:3000/username3/dulce-et-decorum-est3-481b",
                  "created_at": "2023-01-11T00:29:38Z",
                  "edited_at": "2023-01-11T00:29:38Z",
                  "crossposted_at": null,
                  "published_at": "2023-01-11T00:29:38Z",
                  "last_comment_at": "2023-01-11T00:29:38Z",
                  "reading_time_minutes": 1,
                  "tag_list": "",
                  "tags": [

                  ],
                  "body_html": "<p><strong>New</strong> body for the article</p>\n\n",
                  "body_markdown": "**New** body for the article",
                  "user": {
                    "name": "Elbert \"Cornell\" \\:/ Buckridge",
                    "username": "username3",
                    "twitter_username": "twitter3",
                    "github_username": "github3",
                    "user_id": 855,
                    "website_url": null,
                    "profile_image": "/uploads/user/profile_image/855/6bcdfebe-d24c-46a9-8789-2342c4a0701b.jpeg",
                    "profile_image_90": "/uploads/user/profile_image/855/6bcdfebe-d24c-46a9-8789-2342c4a0701b.jpeg"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "example": {
                  "error": "param is missing or the value is empty: article",
                  "status": 422
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "body_markdown": {
                    "type": "string"
                  },
                  "published": {
                    "type": "boolean"
                  },
                  "series": {
                    "type": "string"
                  },
                  "main_image": {
                    "type": "string"
                  },
                  "canonical_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/{username}/{slug}": {
      "get": {
        "summary": "Published article by path",
        "security": [

        ],
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to retrieve a single published article given its `path`.",
        "operationId": "getArticleByPath",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Article",
            "content": {
              "application/json": {
                "example": {
                  "type_of": "article",
                  "id": 377,
                  "title": "The Daffodil Sky6",
                  "description": "Tousled quinoa hella sriracha deep v hoodie. Wayfarers gentrify blue bottle cliche disrupt pour-over....",
                  "readable_publish_date": "Jan 11",
                  "slug": "the-daffodil-sky6-3l5k",
                  "path": "/username7/the-daffodil-sky6-3l5k",
                  "url": "http://localhost:3000/username7/the-daffodil-sky6-3l5k",
                  "comments_count": 0,
                  "public_reactions_count": 0,
                  "collection_id": null,
                  "published_timestamp": "2023-01-11T00:29:38Z",
                  "positive_reactions_count": 0,
                  "cover_image": "http://localhost:3000/assets/18-0c8db7667732647d3000787a9481d38dc0dbe1b8ebc0b097db816f8db8cd097a.png",
                  "social_image": "http://localhost:3000/assets/18-0c8db7667732647d3000787a9481d38dc0dbe1b8ebc0b097db816f8db8cd097a.png",
                  "canonical_url": "http://localhost:3000/username7/the-daffodil-sky6-3l5k",
                  "created_at": "2023-01-11T00:29:38Z",
                  "edited_at": null,
                  "crossposted_at": null,
                  "published_at": "2023-01-11T00:29:38Z",
                  "last_comment_at": "2023-01-11T00:29:38Z",
                  "reading_time_minutes": 1,
                  "tag_list": "discuss",
                  "tags": [
                    "discuss"
                  ],
                  "body_html": "<p>Tousled quinoa hella sriracha deep v hoodie. Wayfarers gentrify blue bottle cliche disrupt pour-over. Plaid tilde tumblr brooklyn tacos literally drinking single-origin coffee.</p>\n\n<p>Xoxo +1 wes anderson echo hoodie retro.</p>\n\n",
                  "body_markdown": "---\ntitle: The Daffodil Sky6\npublished: true\ntags: discuss\ndate: \nseries: \ncanonical_url: \n\n---\n\nTousled quinoa hella sriracha deep v hoodie. Wayfarers gentrify blue bottle cliche disrupt pour-over. Plaid tilde tumblr brooklyn tacos literally drinking single-origin coffee.\n\n\nXoxo +1 wes anderson echo hoodie retro.\n\n",
                  "user": {
                    "name": "Reed \"Jerrod\" \\:/ Pfeffer",
                    "username": "username7",
                    "twitter_username": "twitter7",
                    "github_username": "github7",
                    "user_id": 859,
                    "website_url": null,
                    "profile_image": "/uploads/user/profile_image/859/ea124e4c-729f-41ee-af65-f106762162c4.jpeg",
                    "profile_image_90": "/uploads/user/profile_image/859/ea124e4c-729f-41ee-af65-f106762162c4.jpeg"
                  },
                  "flare_tag": {
                    "name": "discuss",
                    "bg_color_hex": "#000000",
                    "text_color_hex": "#ffffff"
                  }
                },
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/me": {
      "get": {
        "summary": "User's articles",
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nPublished articles will be in reverse chronological publication order.\n\nIt will return published articles with pagination. By default a page will contain 30 articles.",
        "operationId": "getUserArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A List of the authenticated user's Articles",
            "content": {
              "application/json": {
                "example": [

                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/me/published": {
      "get": {
        "summary": "User's published articles",
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nPublished articles will be in reverse chronological publication order.\n\nIt will return published articles with pagination. By default a page will contain 30 articles.",
        "operationId": "getUserPublishedArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A List of the authenticated user's Articles",
            "content": {
              "application/json": {
                "example": [

                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/me/unpublished": {
      "get": {
        "summary": "User's unpublished articles",
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nUnpublished articles will be in reverse chronological creation order.\n\nIt will return unpublished articles with pagination. By default a page will contain 30 articles.",
        "operationId": "getUserUnpublishedArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A List of the authenticated user's Articles",
            "content": {
              "application/json": {
                "example": [

                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/me/all": {
      "get": {
        "summary": "User's all articles",
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nIt will return both published and unpublished articles with pagination.\n\nUnpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.\n\nBy default a page will contain 30 articles.",
        "operationId": "getUserAllArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A List of the authenticated user's Articles",
            "content": {
              "application/json": {
                "example": [

                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/{id}/unpublish": {
      "put": {
        "summary": "Unpublish an article",
        "tags": [
          "articles"
        ],
        "description": "This endpoint allows the client to unpublish an article.\n\nThe user associated with the API key must have any 'admin' or 'moderator' role.\n\nThe article will be unpublished and will no longer be visible to the public. It will remain\nin the database and will set back to draft status on the author's posts dashboard. Any\nnotifications associated with the article will be deleted. Any comments on the article\nwill remain.",
        "operationId": "unpublishArticle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the article to unpublish.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 1
          },
          {
            "name": "note",
            "in": "query",
            "required": false,
            "description": "Content for the note that's created along with unpublishing",
            "schema": {
              "type": "string"
            },
            "example": "Admin requested unpublishing all articles via API"
          }
        ],
        "responses": {
          "204": {
            "description": "Article successfully unpublished"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://dev.to/api",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "api-key": [

      ]
    }
  ],
  "components": {
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "name": "api-key",
        "in": "header",
        "description": "API Key authentication.\n\nAuthentication for some endpoints, like write operations on the\nArticles API require a DEV API key.\n\nAll authenticated endpoints are CORS disabled, the API key is intended for non-browser scripts.\n\n### Getting an API key\n\nTo obtain one, please follow these steps:\n\n  - visit https://dev.to/settings/extensions\n  - in the \"DEV API Keys\" section create a new key by adding a\n    description and clicking on \"Generate API Key\"\n\n    ![obtain a DEV API Key](https://user-images.githubusercontent.com/37842/172718105-bd93664e-76e0-477d-99c4-265dda0b06c5.png)\n\n  - You'll see the newly generated key in the same view\n    ![generated DEV API Key](https://user-images.githubusercontent.com/37842/172718151-e7fe26a0-9937-42e8-96c6-333acdab9e49.png)"
      }
    },
    "parameters": {
      "pageParam": {
        "in": "query",
        "name": "page",
        "required": false,
        "description": "Pagination page",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 1
        }
      },
      "perPageParam10to1000": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 10
        }
      },
      "perPageParam24to1000": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 24
        }
      },
      "perPageParam30to1000": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 30
        }
      },
      "perPageParam30to100": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 30
        }
      },
      "perPageParam80to1000": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 80
        }
      },
      "listingCategoryParam": {
        "name": "category",
        "in": "query",
        "description": "Using this parameter will return listings belonging to the\n              requested category.",
        "schema": {
          "type": "string"
        },
        "example": "cfp"
      }
    },
    "schemas": {
      "ArticleFlareTag": {
        "description": "Flare tag of the article",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bg_color_hex": {
            "description": "Background color (hexadecimal)",
            "type": "string"
          },
          "text_color_hex": {
            "description": "Text color (hexadecimal)",
            "type": "string"
          }
        }
      },
      "ArticleIndex": {
        "description": "Representation of an article or post returned in a list",
        "type": "object",
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cover_image": {
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "readable_publish_date": {
            "type": "string"
          },
          "social_image": {
            "type": "string",
            "format": "url"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "format": "path"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "canonical_url": {
            "type": "string",
            "format": "url"
          },
          "positive_reactions_count": {
            "type": "integer",
            "format": "int32"
          },
          "public_reactions_count": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "edited_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "crossposted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_comment_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_timestamp": {
            "description": "Crossposting or published date time",
            "type": "string",
            "format": "date-time"
          },
          "reading_time_minutes": {
            "description": "Reading time, in minutes",
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "$ref": "#/components/schemas/SharedUser"
          },
          "flare_tag": {
            "$ref": "#/components/schemas/ArticleFlareTag"
          },
          "organization": {
            "$ref": "#/components/schemas/SharedOrganization"
          }
        },
        "required": [
          "type_of",
          "id",
          "title",
          "description",
          "cover_image",
          "readable_publish_date",
          "social_image",
          "tag_list",
          "tags",
          "slug",
          "path",
          "url",
          "canonical_url",
          "comments_count",
          "positive_reactions_count",
          "public_reactions_count",
          "created_at",
          "edited_at",
          "crossposted_at",
          "published_at",
          "last_comment_at",
          "published_timestamp",
          "user",
          "reading_time_minutes"
        ]
      },
      "PodcastEpisodeIndex": {
        "description": "Representation of a podcast episode returned in a list",
        "type": "object",
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "class_name": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "format": "path"
          },
          "title": {
            "type": "string"
          },
          "image_url": {
            "description": "Podcast episode image url or podcast image url",
            "type": "string",
            "format": "url"
          },
          "podcast": {
            "$ref": "#/components/schemas/SharedPodcast"
          }
        },
        "required": [
          "type_of",
          "class_name",
          "id",
          "path",
          "title",
          "image_url",
          "podcast"
        ]
      },
      "SharedUser": {
        "description": "The resource creator",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "twitter_username": {
            "type": "string",
            "nullable": true
          },
          "github_username": {
            "type": "string",
            "nullable": true
          },
          "website_url": {
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "profile_image": {
            "description": "Profile image (640x640)",
            "type": "string"
          },
          "profile_image_90": {
            "description": "Profile image (90x90)",
            "type": "string"
          }
        }
      },
      "SharedOrganization": {
        "description": "The organization the resource belongs to",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "profile_image": {
            "description": "Profile image (640x640)",
            "type": "string",
            "format": "url"
          },
          "profile_image_90": {
            "description": "Profile image (90x90)",
            "type": "string",
            "format": "url"
          }
        }
      },
      "SharedPodcast": {
        "description": "The podcast that the resource belongs to",
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "image_url": {
            "description": "Podcast image url",
            "type": "string",
            "format": "url"
          }
        }
      }
    }
  }
}