{
  "openapi": "3.0.3",
  "info": {
    "title": "Forem API V1",
    "version": "1.0.0",
    "description": "Access Forem articles, users and other resources via API.\n        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).\n        All endpoints can be accessed with the 'api-key' header and a accept header, but\n        some of them are accessible publicly without authentication.\n\n        Dates and date times, unless otherwise specified, must be in\n        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format."
  },
  "paths": {
    "/api/articles": {
      "post": {
        "summary": "Publish article",
        "tags": ["articles"],
        "description": "This endpoint allows the client to create a new article.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.",
        "operationId": "createArticle",
        "parameters": [],
        "responses": {
          "201": {
            "description": "An Article",
            "content": {
              "application/json": {
                "example": {
                  "type_of": "article",
                  "id": 1126,
                  "title": "New article",
                  "description": "New post example",
                  "readable_publish_date": "Jan 23",
                  "slug": "new-article-27e3",
                  "path": "/username383/new-article-27e3",
                  "url": "http://localhost:3000/username383/new-article-27e3",
                  "comments_count": 0,
                  "public_reactions_count": 0,
                  "collection_id": 66,
                  "published_timestamp": "2023-01-23T17:47:24Z",
                  "positive_reactions_count": 0,
                  "cover_image": "https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg",
                  "social_image": "https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg",
                  "canonical_url": "https://dev.to/fdocr/headless-chrome-dual-mode-tests-for-ruby-on-rails-4p6g",
                  "created_at": "2023-01-23T17:47:24Z",
                  "edited_at": null,
                  "crossposted_at": null,
                  "published_at": "2023-01-23T17:47:24Z",
                  "last_comment_at": "2023-01-23T17:47:24Z",
                  "reading_time_minutes": 1,
                  "tag_list": "",
                  "tags": [],
                  "body_html": "<p><strong>New</strong> body for the article</p>\n\n",
                  "body_markdown": "**New** body for the article",
                  "user": {
                    "name": "Sondra \"Carroll\" \\:/ O'Hara",
                    "username": "username383",
                    "twitter_username": "twitter383",
                    "github_username": "github383",
                    "user_id": 1779,
                    "website_url": null,
                    "profile_image": "/uploads/user/profile_image/1779/297cfd32-2677-4f1d-b0b4-8edd0123bef5.jpeg",
                    "profile_image_90": "/uploads/user/profile_image/1779/297cfd32-2677-4f1d-b0b4-8edd0123bef5.jpeg"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "example": {
                  "error": "param is missing or the value is empty: article",
                  "status": 422
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Article"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Published articles",
        "security": [],
        "tags": ["articles"],
        "description": "This endpoint allows the client to retrieve a list of articles.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\nBy default it will return featured, published articles ordered\nby descending popularity.\n\nIt supports pagination, each page will contain `30` articles by default.",
        "operationId": "getArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve articles that contain the requested tag. Articles\nwill be ordered by descending popularity.This parameter can be used in conjuction with `top`.",
            "schema": {
              "type": "string"
            },
            "example": "discuss"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve articles with any of the comma-separated tags.\nArticles will be ordered by descending popularity.",
            "schema": {
              "type": "string"
            },
            "example": "javascript, css"
          },
          {
            "name": "tags_exclude",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve articles that do _not_ contain _any_\nof comma-separated tags. Articles will be ordered by descending popularity.",
            "schema": {
              "type": "string"
            },
            "example": "node, java"
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve articles belonging\n            to a User or Organization ordered by descending publication date.\n            If `state=all` the number of items returned will be `1000` instead of the default `30`.\n            This parameter can be used in conjuction with `state`.",
            "schema": {
              "type": "string"
            },
            "example": "ben"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Using this parameter will allow the client to check which articles are fresh or rising.\n            If `state=fresh` the server will return fresh articles.\n            If `state=rising` the server will return rising articles.\n            This param can be used in conjuction with `username`, only if set to `all`.",
            "schema": {
              "type": "string",
              "enum": ["fresh", "rising", "all"]
            },
            "example": "fresh"
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "description": "Using this parameter will allow the client to return the most popular articles\nin the last `N` days.\n`top` indicates the number of days since publication of the articles returned.\nThis param can be used in conjuction with `tag`.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 2
          },
          {
            "name": "collection_id",
            "in": "query",
            "required": false,
            "description": "Adding this will allow the client to return the list of articles\nbelonging to the requested collection, ordered by ascending publication date.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 99
          }
        ],
        "responses": {
          "200": {
            "description": "A List of Articles",
            "content": {
              "application/json": {
                "example": [
                  {
                    "type_of": "article",
                    "id": 1129,
                    "title": "The Torment of Others175",
                    "description": "Small batch ethical art party everyday before they sold out fingerstache. Crucifix selfies...",
                    "readable_publish_date": "Jan 23",
                    "slug": "the-torment-of-others175-2a2p",
                    "path": "/username387/the-torment-of-others175-2a2p",
                    "url": "http://localhost:3000/username387/the-torment-of-others175-2a2p",
                    "comments_count": 0,
                    "public_reactions_count": 0,
                    "collection_id": null,
                    "published_timestamp": "2023-01-23T17:47:24Z",
                    "positive_reactions_count": 0,
                    "cover_image": "http://localhost:3000/assets/20-92231c1d2ddb3b707b8c1b5cb711ef17632ff2a64495970a58518ce33c3a4f76.png",
                    "social_image": "http://localhost:3000/assets/20-92231c1d2ddb3b707b8c1b5cb711ef17632ff2a64495970a58518ce33c3a4f76.png",
                    "canonical_url": "http://localhost:3000/username387/the-torment-of-others175-2a2p",
                    "created_at": "2023-01-23T17:47:24Z",
                    "edited_at": null,
                    "crossposted_at": null,
                    "published_at": "2023-01-23T17:47:24Z",
                    "last_comment_at": "2023-01-23T17:47:24Z",
                    "reading_time_minutes": 1,
                    "tag_list": ["discuss"],
                    "tags": "discuss",
                    "user": {
                      "name": "Alton \"Earlie\" \\:/ Leannon",
                      "username": "username387",
                      "twitter_username": "twitter387",
                      "github_username": "github387",
                      "user_id": 1783,
                      "website_url": null,
                      "profile_image": "/uploads/user/profile_image/1783/4ef04006-d30f-434d-b949-72266ac70769.jpeg",
                      "profile_image_90": "/uploads/user/profile_image/1783/4ef04006-d30f-434d-b949-72266ac70769.jpeg"
                    },
                    "organization": {
                      "name": "Bernhard-Jast",
                      "username": "org70",
                      "slug": "org70",
                      "profile_image": "/uploads/organization/profile_image/332/aeee70a1-f1af-4345-a8ce-46db3054ee41.png",
                      "profile_image_90": "/uploads/organization/profile_image/332/aeee70a1-f1af-4345-a8ce-46db3054ee41.png"
                    },
                    "flare_tag": {
                      "name": "discuss",
                      "bg_color_hex": "#000000",
                      "text_color_hex": "#ffffff"
                    }
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/latest": {
      "get": {
        "summary": "Published articles sorted by published date",
        "security": [],
        "tags": ["articles"],
        "description": "This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.\n\nIt supports pagination, each page will contain 30 articles by default.",
        "operationId": "getLatestArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "200": {
            "description": "A List of Articles",
            "content": {
              "application/json": {
                "example": [
                  {
                    "type_of": "article",
                    "id": 1132,
                    "title": "Specimen Days178",
                    "description": "Park raw denim carry. Mlkshk scenester viral chambray vhs leggings. Tumblr stumptown pork belly...",
                    "readable_publish_date": "Jan 23",
                    "slug": "specimen-days178-2k0e",
                    "path": "/username390/specimen-days178-2k0e",
                    "url": "http://localhost:3000/username390/specimen-days178-2k0e",
                    "comments_count": 0,
                    "public_reactions_count": 0,
                    "collection_id": null,
                    "published_timestamp": "2023-01-23T17:47:24Z",
                    "positive_reactions_count": 0,
                    "cover_image": "http://localhost:3000/assets/34-d27f3a4a9f6f1f373003c74b31749764691f510b2a18b55039478583864a067e.png",
                    "social_image": "http://localhost:3000/assets/34-d27f3a4a9f6f1f373003c74b31749764691f510b2a18b55039478583864a067e.png",
                    "canonical_url": "http://localhost:3000/username390/specimen-days178-2k0e",
                    "created_at": "2023-01-23T17:47:24Z",
                    "edited_at": null,
                    "crossposted_at": null,
                    "published_at": "2023-01-23T17:47:24Z",
                    "last_comment_at": "2023-01-23T17:47:24Z",
                    "reading_time_minutes": 1,
                    "tag_list": ["javascript", "html", "discuss"],
                    "tags": "javascript, html, discuss",
                    "user": {
                      "name": "Contessa \"Norah\" \\:/ Torp",
                      "username": "username390",
                      "twitter_username": "twitter390",
                      "github_username": "github390",
                      "user_id": 1786,
                      "website_url": null,
                      "profile_image": "/uploads/user/profile_image/1786/b1c3e128-0a7e-4c9b-a7ca-15c42ac6db7d.jpeg",
                      "profile_image_90": "/uploads/user/profile_image/1786/b1c3e128-0a7e-4c9b-a7ca-15c42ac6db7d.jpeg"
                    },
                    "flare_tag": {
                      "name": "discuss",
                      "bg_color_hex": "#000000",
                      "text_color_hex": "#ffffff"
                    }
                  },
                  {
                    "type_of": "article",
                    "id": 1131,
                    "title": "Things Fall Apart177",
                    "description": "Poutine migas church-key. Try-hard distillery hammock tousled swag yuccie vegan. Trust fund tofu twee...",
                    "readable_publish_date": "Jan 23",
                    "slug": "things-fall-apart177-5fe9",
                    "path": "/username389/things-fall-apart177-5fe9",
                    "url": "http://localhost:3000/username389/things-fall-apart177-5fe9",
                    "comments_count": 0,
                    "public_reactions_count": 0,
                    "collection_id": null,
                    "published_timestamp": "2023-01-23T17:47:24Z",
                    "positive_reactions_count": 0,
                    "cover_image": "http://localhost:3000/assets/25-b4bb206b62bee552880440f638594e41dcd649ed9bd821af2e8dfc671d1d6813.png",
                    "social_image": "http://localhost:3000/assets/25-b4bb206b62bee552880440f638594e41dcd649ed9bd821af2e8dfc671d1d6813.png",
                    "canonical_url": "http://localhost:3000/username389/things-fall-apart177-5fe9",
                    "created_at": "2023-01-23T17:47:24Z",
                    "edited_at": null,
                    "crossposted_at": null,
                    "published_at": "2023-01-23T17:47:24Z",
                    "last_comment_at": "2023-01-23T17:47:24Z",
                    "reading_time_minutes": 1,
                    "tag_list": ["javascript", "html", "discuss"],
                    "tags": "javascript, html, discuss",
                    "user": {
                      "name": "Fidela \"Desmond\" \\:/ Lakin",
                      "username": "username389",
                      "twitter_username": "twitter389",
                      "github_username": "github389",
                      "user_id": 1785,
                      "website_url": null,
                      "profile_image": "/uploads/user/profile_image/1785/10aa7ea9-fbec-4524-b42c-74c8552ec3f2.jpeg",
                      "profile_image_90": "/uploads/user/profile_image/1785/10aa7ea9-fbec-4524-b42c-74c8552ec3f2.jpeg"
                    },
                    "flare_tag": {
                      "name": "discuss",
                      "bg_color_hex": "#000000",
                      "text_color_hex": "#ffffff"
                    }
                  },
                  {
                    "type_of": "article",
                    "id": 1130,
                    "title": "Beyond the Mexique Bay176",
                    "description": "Gastropub chicharrones vhs direct trade portland whatever sustainable scenester. Flannel knausgaard...",
                    "readable_publish_date": "Jan 23",
                    "slug": "beyond-the-mexique-bay176-3e3j",
                    "path": "/username388/beyond-the-mexique-bay176-3e3j",
                    "url": "http://localhost:3000/username388/beyond-the-mexique-bay176-3e3j",
                    "comments_count": 0,
                    "public_reactions_count": 0,
                    "collection_id": null,
                    "published_timestamp": "2023-01-23T17:47:24Z",
                    "positive_reactions_count": 0,
                    "cover_image": "http://localhost:3000/assets/30-08b2d52669e0680784f50291966e33f77cbee815907e6abbacf74018fa3f3567.png",
                    "social_image": "http://localhost:3000/assets/30-08b2d52669e0680784f50291966e33f77cbee815907e6abbacf74018fa3f3567.png",
                    "canonical_url": "http://localhost:3000/username388/beyond-the-mexique-bay176-3e3j",
                    "created_at": "2023-01-23T17:47:24Z",
                    "edited_at": null,
                    "crossposted_at": null,
                    "published_at": "2023-01-23T17:47:24Z",
                    "last_comment_at": "2023-01-23T17:47:24Z",
                    "reading_time_minutes": 1,
                    "tag_list": ["javascript", "html", "discuss"],
                    "tags": "javascript, html, discuss",
                    "user": {
                      "name": "Rick \"Colby\" \\:/ Batz",
                      "username": "username388",
                      "twitter_username": "twitter388",
                      "github_username": "github388",
                      "user_id": 1784,
                      "website_url": null,
                      "profile_image": "/uploads/user/profile_image/1784/bf3db967-c0de-4a1e-9c15-cda0b15c2e40.jpeg",
                      "profile_image_90": "/uploads/user/profile_image/1784/bf3db967-c0de-4a1e-9c15-cda0b15c2e40.jpeg"
                    },
                    "flare_tag": {
                      "name": "discuss",
                      "bg_color_hex": "#000000",
                      "text_color_hex": "#ffffff"
                    }
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/{id}": {
      "get": {
        "summary": "Published article by id",
        "security": [],
        "tags": ["articles"],
        "description": "This endpoint allows the client to retrieve a single published article given its `id`.",
        "operationId": "getArticleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Article",
            "content": {
              "application/json": {
                "example": {
                  "type_of": "article",
                  "id": 1133,
                  "title": "Fair Stood the Wind for France179",
                  "description": "Cornhole asymmetrical organic kinfolk mlkshk sriracha vhs. Wayfarers tattooed small batch venmo...",
                  "readable_publish_date": "Jan 23",
                  "slug": "fair-stood-the-wind-for-france179-g4h",
                  "path": "/username391/fair-stood-the-wind-for-france179-g4h",
                  "url": "http://localhost:3000/username391/fair-stood-the-wind-for-france179-g4h",
                  "comments_count": 0,
                  "public_reactions_count": 0,
                  "collection_id": null,
                  "published_timestamp": "2023-01-23T17:47:24Z",
                  "positive_reactions_count": 0,
                  "cover_image": "http://localhost:3000/assets/36-83d24fbff858b9dd4035d1e7d2df14090946ae4fed631055fc1d5862e7018348.png",
                  "social_image": "http://localhost:3000/assets/36-83d24fbff858b9dd4035d1e7d2df14090946ae4fed631055fc1d5862e7018348.png",
                  "canonical_url": "http://localhost:3000/username391/fair-stood-the-wind-for-france179-g4h",
                  "created_at": "2023-01-23T17:47:24Z",
                  "edited_at": null,
                  "crossposted_at": null,
                  "published_at": "2023-01-23T17:47:24Z",
                  "last_comment_at": "2023-01-23T17:47:24Z",
                  "reading_time_minutes": 1,
                  "tag_list": "discuss",
                  "tags": ["discuss"],
                  "body_html": "<p>Cornhole asymmetrical organic kinfolk mlkshk sriracha vhs. Wayfarers tattooed small batch venmo chambray.</p>\n\n<p>Disrupt iphone wes anderson ethical. Next level cleanse cardigan bitters. Ugh intelligentsia heirloom roof.</p>\n\n",
                  "body_markdown": "---\ntitle: Fair Stood the Wind for France179\npublished: true\ntags: discuss\ndate: \nseries: \ncanonical_url: \n\n---\n\nCornhole asymmetrical organic kinfolk mlkshk sriracha vhs. Wayfarers tattooed small batch venmo chambray.\n\n\nDisrupt iphone wes anderson ethical. Next level cleanse cardigan bitters. Ugh intelligentsia heirloom roof.\n\n",
                  "user": {
                    "name": "Abraham \"Mitchell\" \\:/ Davis",
                    "username": "username391",
                    "twitter_username": "twitter391",
                    "github_username": "github391",
                    "user_id": 1787,
                    "website_url": null,
                    "profile_image": "/uploads/user/profile_image/1787/63cce54b-39ab-4c9e-bbcc-f37decb26bf1.jpeg",
                    "profile_image_90": "/uploads/user/profile_image/1787/63cce54b-39ab-4c9e-bbcc-f37decb26bf1.jpeg"
                  },
                  "flare_tag": {
                    "name": "discuss",
                    "bg_color_hex": "#000000",
                    "text_color_hex": "#ffffff"
                  }
                },
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an article by id",
        "tags": ["articles"],
        "description": "This endpoint allows the client to update an existing article.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.",
        "operationId": "updateArticle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to unpublish.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "An Article",
            "content": {
              "application/json": {
                "example": {
                  "type_of": "article",
                  "id": 1134,
                  "title": "The Lathe of Heaven180",
                  "description": "Gluten-free master cold-pressed organic. Squid brunch goth.  Heirloom knausgaard biodiesel neutra...",
                  "readable_publish_date": "Jan 23",
                  "slug": "the-lathe-of-heaven180-2mi0",
                  "path": "/username392/the-lathe-of-heaven180-2mi0",
                  "url": "http://localhost:3000/username392/the-lathe-of-heaven180-2mi0",
                  "comments_count": 0,
                  "public_reactions_count": 0,
                  "collection_id": null,
                  "published_timestamp": "2023-01-23T17:47:24Z",
                  "positive_reactions_count": 0,
                  "cover_image": "http://localhost:3000/assets/22-837b6c737e37b6d229b36d73e95ead7f26e0a346e0aa7dfbca74630ae161fb0d.png",
                  "social_image": "http://localhost:3000/assets/22-837b6c737e37b6d229b36d73e95ead7f26e0a346e0aa7dfbca74630ae161fb0d.png",
                  "canonical_url": "http://localhost:3000/username392/the-lathe-of-heaven180-2mi0",
                  "created_at": "2023-01-23T17:47:24Z",
                  "edited_at": "2023-01-23T17:47:24Z",
                  "crossposted_at": null,
                  "published_at": "2023-01-23T17:47:24Z",
                  "last_comment_at": "2023-01-23T17:47:24Z",
                  "reading_time_minutes": 1,
                  "tag_list": "",
                  "tags": [],
                  "body_html": "<p><strong>New</strong> body for the article</p>\n\n",
                  "body_markdown": "**New** body for the article",
                  "user": {
                    "name": "Carin \"Boris\" \\:/ Toy",
                    "username": "username392",
                    "twitter_username": "twitter392",
                    "github_username": "github392",
                    "user_id": 1788,
                    "website_url": null,
                    "profile_image": "/uploads/user/profile_image/1788/d9976a60-ee24-4dfc-be18-e8b20749bcf5.jpeg",
                    "profile_image_90": "/uploads/user/profile_image/1788/d9976a60-ee24-4dfc-be18-e8b20749bcf5.jpeg"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "example": {
                  "error": "param is missing or the value is empty: article",
                  "status": 422
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Article"
              }
            }
          }
        }
      }
    },
    "/api/articles/{username}/{slug}": {
      "get": {
        "summary": "Published article by path",
        "security": [],
        "tags": ["articles"],
        "description": "This endpoint allows the client to retrieve a single published article given its `path`.",
        "operationId": "getArticleByPath",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Article",
            "content": {
              "application/json": {
                "example": {
                  "type_of": "article",
                  "id": 1137,
                  "title": "Shall not Perish183",
                  "description": "Direct trade small batch quinoa artisan. Lomo loko biodiesel chicharrones tilde. Polaroid franzen...",
                  "readable_publish_date": "Jan 23",
                  "slug": "shall-not-perish183-nm1",
                  "path": "/username396/shall-not-perish183-nm1",
                  "url": "http://localhost:3000/username396/shall-not-perish183-nm1",
                  "comments_count": 0,
                  "public_reactions_count": 0,
                  "collection_id": null,
                  "published_timestamp": "2023-01-23T17:47:24Z",
                  "positive_reactions_count": 0,
                  "cover_image": "http://localhost:3000/assets/8-915172672c34364d29c3fce07afa413c1ac072beff54ddd79fc7e3ed633556a1.png",
                  "social_image": "http://localhost:3000/assets/8-915172672c34364d29c3fce07afa413c1ac072beff54ddd79fc7e3ed633556a1.png",
                  "canonical_url": "http://localhost:3000/username396/shall-not-perish183-nm1",
                  "created_at": "2023-01-23T17:47:24Z",
                  "edited_at": null,
                  "crossposted_at": null,
                  "published_at": "2023-01-23T17:47:24Z",
                  "last_comment_at": "2023-01-23T17:47:24Z",
                  "reading_time_minutes": 1,
                  "tag_list": "discuss",
                  "tags": ["discuss"],
                  "body_html": "<p>Direct trade small batch quinoa artisan. Lomo loko biodiesel chicharrones tilde. Polaroid franzen selvage occupy craft beer xoxo hoodie try-hard. Muggle magic lo-fi austin wes anderson church-key you probably haven't heard of them jean shorts.</p>\n\n<p>Try-hard fanny pack next level salvia. Thundercats church-key ethical iphone. Freegan ugh meggings chambray pop-up swag selfies.</p>\n\n",
                  "body_markdown": "---\ntitle: Shall not Perish183\npublished: true\ntags: discuss\ndate: \nseries: \ncanonical_url: \n\n---\n\nDirect trade small batch quinoa artisan. Lomo loko biodiesel chicharrones tilde. Polaroid franzen selvage occupy craft beer xoxo hoodie try-hard. Muggle magic lo-fi austin wes anderson church-key you probably haven't heard of them jean shorts.\n\n\nTry-hard fanny pack next level salvia. Thundercats church-key ethical iphone. Freegan ugh meggings chambray pop-up swag selfies.\n\n",
                  "user": {
                    "name": "Brenton \"Avery\" \\:/ Littel",
                    "username": "username396",
                    "twitter_username": "twitter396",
                    "github_username": "github396",
                    "user_id": 1792,
                    "website_url": null,
                    "profile_image": "/uploads/user/profile_image/1792/12f77e3f-b2b7-4e39-a9bd-d502cdc173c1.jpeg",
                    "profile_image_90": "/uploads/user/profile_image/1792/12f77e3f-b2b7-4e39-a9bd-d502cdc173c1.jpeg"
                  },
                  "flare_tag": {
                    "name": "discuss",
                    "bg_color_hex": "#000000",
                    "text_color_hex": "#ffffff"
                  }
                },
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/me": {
      "get": {
        "summary": "User's articles",
        "tags": ["articles"],
        "description": "This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nPublished articles will be in reverse chronological publication order.\n\nIt will return published articles with pagination. By default a page will contain 30 articles.",
        "operationId": "getUserArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A List of the authenticated user's Articles",
            "content": {
              "application/json": {
                "example": [],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/me/published": {
      "get": {
        "summary": "User's published articles",
        "tags": ["articles"],
        "description": "This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nPublished articles will be in reverse chronological publication order.\n\nIt will return published articles with pagination. By default a page will contain 30 articles.",
        "operationId": "getUserPublishedArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A List of the authenticated user's Articles",
            "content": {
              "application/json": {
                "example": [],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/me/unpublished": {
      "get": {
        "summary": "User's unpublished articles",
        "tags": ["articles"],
        "description": "This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nUnpublished articles will be in reverse chronological creation order.\n\nIt will return unpublished articles with pagination. By default a page will contain 30 articles.",
        "operationId": "getUserUnpublishedArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A List of the authenticated user's Articles",
            "content": {
              "application/json": {
                "example": [],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/me/all": {
      "get": {
        "summary": "User's all articles",
        "tags": ["articles"],
        "description": "This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nIt will return both published and unpublished articles with pagination.\n\nUnpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.\n\nBy default a page will contain 30 articles.",
        "operationId": "getUserAllArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A List of the authenticated user's Articles",
            "content": {
              "application/json": {
                "example": [],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/{id}/unpublish": {
      "put": {
        "summary": "Unpublish an article",
        "tags": ["articles"],
        "description": "This endpoint allows the client to unpublish an article.\n\nThe user associated with the API key must have any 'admin' or 'moderator' role.\n\nThe article will be unpublished and will no longer be visible to the public. It will remain\nin the database and will set back to draft status on the author's posts dashboard. Any\nnotifications associated with the article will be deleted. Any comments on the article\nwill remain.",
        "operationId": "unpublishArticle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the article to unpublish.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 1
          },
          {
            "name": "note",
            "in": "query",
            "required": false,
            "description": "Content for the note that's created along with unpublishing",
            "schema": {
              "type": "string"
            },
            "example": "Admin requested unpublishing all articles via API"
          }
        ],
        "responses": {
          "204": {
            "description": "Article successfully unpublished"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "404": {
            "description": "Article Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/display_ads": {
      "get": {
        "summary": "display ads",
        "tags": ["display ads"],
        "description": "This endpoint allows the client to retrieve a list of all display ads.",
        "responses": {
          "200": {
            "description": "successful",
            "content": {
              "application/json": {
                "example": []
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "display ads",
        "tags": ["display ads"],
        "description": "This endpoint allows the client to create a new display ad.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful",
            "content": {
              "application/json": {
                "example": {
                  "id": 26,
                  "approved": true,
                  "body_markdown": "# Hi, this is ad\nYep, it's an ad",
                  "cached_tag_list": "",
                  "clicks_count": 0,
                  "created_at": "2023-01-23T18:47:25.730+01:00",
                  "display_to": "all",
                  "impressions_count": 0,
                  "name": "Example Ad",
                  "organization_id": null,
                  "placement_area": "post_comments",
                  "processed_html": "<h1>  <a href=\"#hi-this-is-ad\" class=\"anchor\">  </a>  Hi, this is ad</h1><p>Yep, it's an ad</p>",
                  "published": true,
                  "success_rate": 0.0,
                  "type_of": "in_house",
                  "updated_at": "2023-01-23T18:47:25.730+01:00",
                  "tag_list": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "422": {
            "description": "unprocessable",
            "content": {
              "application/json": {
                "example": {
                  "id": null,
                  "approved": true,
                  "body_markdown": "# Hi, this is ad\nYep, it's an ad",
                  "cached_tag_list": null,
                  "clicks_count": 0,
                  "created_at": null,
                  "display_to": "all",
                  "impressions_count": 0,
                  "name": "Example Ad",
                  "organization_id": null,
                  "placement_area": "moon",
                  "processed_html": null,
                  "published": true,
                  "success_rate": 0.0,
                  "type_of": "in_house",
                  "updated_at": null,
                  "tag_list": null
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "For internal use, helps distinguish ads from one another"
                  },
                  "body_markdown": {
                    "type": "string",
                    "description": "The text (in markdown) of the ad (required)"
                  },
                  "approved": {
                    "type": "boolean",
                    "description": "Ad must be both published and approved to be in rotation"
                  },
                  "published": {
                    "type": "boolean",
                    "description": "Ad must be both published and approved to be in rotation"
                  },
                  "organization_id": {
                    "type": "integer",
                    "description": "Identifies the organization to which the ad belongs"
                  },
                  "display_to": {
                    "type": "string",
                    "enum": ["all", "logged_in", "logged_out"],
                    "default": "all",
                    "description": "Potentially limits visitors to whom the ad is visible"
                  },
                  "placement_area": {
                    "type": "string",
                    "enum": [
                      "sidebar_left",
                      "sidebar_left_2",
                      "sidebar_right",
                      "post_sidebar",
                      "post_comments"
                    ],
                    "description": "Identifies which area of site layout the ad can appear in"
                  },
                  "tag_list": {
                    "type": "string",
                    "description": "Tags on which this ad can be displayed (blank is all/any tags)"
                  }
                },
                "required": ["name", "body_markdown", "placement_area"]
              }
            }
          }
        }
      }
    },
    "/api/display_ads/{id}": {
      "get": {
        "summary": "display ad",
        "tags": ["display ads"],
        "description": "This endpoint allows the client to retrieve a single display ad, via its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to unpublish.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "content": {
              "application/json": {
                "example": {
                  "id": 27,
                  "approved": false,
                  "body_markdown": "Hello _hey_ Hey hey 9",
                  "cached_tag_list": "",
                  "clicks_count": 0,
                  "created_at": "2023-01-23T18:47:25.854+01:00",
                  "display_to": "all",
                  "impressions_count": 0,
                  "name": "Display Ad 27",
                  "organization_id": 333,
                  "placement_area": "sidebar_left",
                  "processed_html": "<p>Hello <em>hey</em> Hey hey 9</p>",
                  "published": false,
                  "success_rate": 0.0,
                  "type_of": "in_house",
                  "updated_at": "2023-01-23T18:47:25.856+01:00",
                  "tag_list": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "404": {
            "description": "Unknown DisplayAd ID",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "display ads",
        "tags": ["display ads"],
        "description": "This endpoint allows the client to update the attributes of a single display ad, via its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to unpublish.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "content": {
              "application/json": {
                "example": {
                  "approved": false,
                  "body_markdown": "Hello _hey_ Hey hey 10",
                  "display_to": "all",
                  "name": "Display Ad 28",
                  "organization_id": 334,
                  "placement_area": "sidebar_left",
                  "published": false,
                  "processed_html": "<p>Hello <em>hey</em> Hey hey 10</p>",
                  "cached_tag_list": "",
                  "id": 28,
                  "clicks_count": 0,
                  "created_at": "2023-01-23T18:47:26.003+01:00",
                  "impressions_count": 0,
                  "success_rate": 0.0,
                  "type_of": "in_house",
                  "updated_at": "2023-01-23T18:47:26.006+01:00",
                  "tag_list": ""
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "For internal use, helps distinguish ads from one another"
                  },
                  "body_markdown": {
                    "type": "string",
                    "description": "The text (in markdown) of the ad (required)"
                  },
                  "approved": {
                    "type": "boolean",
                    "description": "Ad must be both published and approved to be in rotation"
                  },
                  "published": {
                    "type": "boolean",
                    "description": "Ad must be both published and approved to be in rotation"
                  },
                  "organization_id": {
                    "type": "integer",
                    "description": "Identifies the organization to which the ad belongs"
                  },
                  "display_to": {
                    "type": "string",
                    "enum": ["all", "logged_in", "logged_out"],
                    "default": "all",
                    "description": "Potentially limits visitors to whom the ad is visible"
                  },
                  "placement_area": {
                    "type": "string",
                    "enum": [
                      "sidebar_left",
                      "sidebar_left_2",
                      "sidebar_right",
                      "post_sidebar",
                      "post_comments"
                    ],
                    "description": "Identifies which area of site layout the ad can appear in"
                  },
                  "tag_list": {
                    "type": "string",
                    "description": "Tags on which this ad can be displayed (blank is all/any tags)"
                  }
                },
                "required": ["name", "body_markdown", "placement_area"]
              }
            }
          }
        }
      }
    },
    "/api/display_ads/{id}/unpublish": {
      "put": {
        "summary": "unpublish",
        "tags": ["display ads"],
        "description": "This endpoint allows the client to remove a display ad from rotation by un-publishing it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to unpublish.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          }
        }
      }
    },
    "/api/podcast_episodes": {
      "get": {
        "summary": "Podcast Episodes",
        "security": [],
        "tags": ["podcast_episodes"],
        "description": "This endpoint allows the client to retrieve a list of podcast episodes.\n        \"Podcast episodes\" are episodes belonging to podcasts.\n        It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.\n        It supports pagination, each page will contain 30 articles by default.",
        "operationId": "getPodcastEpisodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "description": "Using this parameter will retrieve episodes belonging to a specific podcast.",
            "schema": {
              "type": "string"
            },
            "example": "codenewbie"
          }
        ],
        "responses": {
          "200": {
            "description": "A List of Podcast episodes filtered by username",
            "content": {
              "application/json": {
                "example": [
                  {
                    "type_of": "podcast_episodes",
                    "class_name": "PodcastEpisode",
                    "id": 26,
                    "path": "/codenewbie/slug-4",
                    "title": "1",
                    "image_url": "/uploads/podcast/image/21/3eb6392c-f7bb-4c79-b701-9a35fb36f129.jpeg",
                    "podcast": {
                      "title": "Péché Mortel",
                      "slug": "codenewbie",
                      "image_url": "/uploads/podcast/image/21/3eb6392c-f7bb-4c79-b701-9a35fb36f129.jpeg"
                    }
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PodcastEpisodeIndex"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unknown Podcast username",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/profile_images/{username}": {
      "get": {
        "summary": "A Users or organizations profile image",
        "tags": ["profile images"],
        "description": "This endpoint allows the client to retrieve a user or organization profile image information by its\n        corresponding username.",
        "operationId": "getProfileImage",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "The parameter is the username of the user or the username of the organization.",
            "schema": {
              "type": "string"
            },
            "example": "janedoe"
          }
        ],
        "responses": {
          "200": {
            "description": "An object containing profile image details",
            "content": {
              "application/json": {
                "example": {
                  "type_of": "profile_image",
                  "image_of": "user",
                  "profile_image": "/uploads/user/profile_image/1819/356e3f1a-d97d-41ed-929d-d8a6cf29d298.jpeg",
                  "profile_image_90": "/uploads/user/profile_image/1819/356e3f1a-d97d-41ed-929d-d8a6cf29d298.jpeg"
                },
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/ProfileImage"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/reactions/toggle": {
      "post": {
        "summary": "toggle reaction",
        "tags": ["reactions"],
        "description": "This endpoint allows the client to toggle the user's reaction to a specified reactable (eg, Article, Comment, or User). For examples:\n        * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles\n        * \"Like\"ing that Article a second time will remove the \"like\" from the user",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["like", "readinglist", "unicorn"]
            }
          },
          {
            "name": "reactable_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reactable_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["Comment", "Article", "User"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "content": {
              "application/json": {
                "example": {
                  "result": "create",
                  "category": "like",
                  "id": 15,
                  "reactable_id": 1141,
                  "reactable_type": "Article"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          }
        }
      }
    },
    "/api/reactions": {
      "post": {
        "summary": "create reaction",
        "tags": ["reactions"],
        "description": "This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:\n        * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles\n        * \"Like\"ing that Article a second time will return the previous \"like\"",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["like", "readinglist", "unicorn"]
            }
          },
          {
            "name": "reactable_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reactable_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["Comment", "Article", "User"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "content": {
              "application/json": {
                "example": {
                  "result": "none",
                  "category": "like",
                  "id": 17,
                  "reactable_id": 1143,
                  "reactable_type": "Article"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          }
        }
      }
    },
    "/api/readinglist": {
      "get": {
        "summary": "Readinglist",
        "tags": ["readinglist"],
        "description": "This endpoint allows the client to retrieve a list of articles that were saved to a Users readinglist.\n        It supports pagination, each page will contain `30` articles by default",
        "operationId": "getReadinglist",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam30to1000"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "200": {
            "description": "A list of articles in the users readinglist",
            "content": {
              "application/json": {
                "example": [],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "A User",
        "tags": ["users"],
        "description": "This endpoint allows the client to retrieve a single user, either by id\nor by the user's username.\n\nFor complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful"
          }
        }
      }
    },
    "/api/users/{id}/unpublish": {
      "put": {
        "summary": "Unpublish a User's Articles and Comments",
        "tags": ["users"],
        "description": "This endpoint allows the client to unpublish all of the articles and\ncomments created by a user.\n\nThe user associated with the API key must have any 'admin' or 'moderator' role.\n\nThis specified user's articles and comments will be unpublished and will no longer be\nvisible to the public. They will remain in the database and will set back to draft status\non the specified user's  dashboard. Any notifications associated with the specified user's\narticles and comments will be deleted.\n\nNote this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT\nstatus code immediately, but the articles and comments will not be unpublished until the\nrequest is completed on the server.",
        "operationId": "unpublishUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to unpublish.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "User's articles and comments successfully unpublished"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "404": {
            "description": "Unknown User ID (still accepted for async processing)",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}/suspend": {
      "put": {
        "summary": "Suspend a User",
        "tags": ["users"],
        "description": "This endpoint allows the client to suspend a user.\n\nThe user associated with the API key must have any 'admin' or 'moderator' role.\n\nThis specified user will be assigned the 'suspended' role. Suspending a user will stop the\nuser from posting new posts and comments. It doesn't delete any of the user's content, just\nprevents them from creating new content while suspended. Users are not notified of their suspension\nin the UI, so if you want them to know about this, you must notify them.",
        "operationId": "suspendUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to suspend.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully unpublished"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "unauthorized",
                  "status": 401
                }
              }
            }
          },
          "404": {
            "description": "Unknown User ID",
            "content": {
              "application/json": {
                "example": {
                  "error": "not found",
                  "status": 404
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://dev.to/api",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "api-key": []
    }
  ],
  "components": {
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "name": "api-key",
        "in": "header",
        "description": "API Key authentication.\n\nAuthentication for some endpoints, like write operations on the\nArticles API require a DEV API key.\n\nAll authenticated endpoints are CORS disabled, the API key is intended for non-browser scripts.\n\n### Getting an API key\n\nTo obtain one, please follow these steps:\n\n  - visit https://dev.to/settings/extensions\n  - in the \"DEV API Keys\" section create a new key by adding a\n    description and clicking on \"Generate API Key\"\n\n    ![obtain a DEV API Key](https://user-images.githubusercontent.com/37842/172718105-bd93664e-76e0-477d-99c4-265dda0b06c5.png)\n\n  - You'll see the newly generated key in the same view\n    ![generated DEV API Key](https://user-images.githubusercontent.com/37842/172718151-e7fe26a0-9937-42e8-96c6-333acdab9e49.png)"
      }
    },
    "parameters": {
      "pageParam": {
        "in": "query",
        "name": "page",
        "required": false,
        "description": "Pagination page",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 1
        }
      },
      "perPageParam10to1000": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 10
        }
      },
      "perPageParam24to1000": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 24
        }
      },
      "perPageParam30to1000": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 30
        }
      },
      "perPageParam30to100": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 30
        }
      },
      "perPageParam80to1000": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 80
        }
      },
      "listingCategoryParam": {
        "name": "category",
        "in": "query",
        "description": "Using this parameter will return listings belonging to the\n              requested category.",
        "schema": {
          "type": "string"
        },
        "example": "cfp"
      }
    },
    "schemas": {
      "ArticleFlareTag": {
        "description": "Flare tag of the article",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bg_color_hex": {
            "description": "Background color (hexadecimal)",
            "type": "string"
          },
          "text_color_hex": {
            "description": "Text color (hexadecimal)",
            "type": "string"
          }
        }
      },
      "ArticleIndex": {
        "description": "Representation of an article or post returned in a list",
        "type": "object",
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cover_image": {
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "readable_publish_date": {
            "type": "string"
          },
          "social_image": {
            "type": "string",
            "format": "url"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "format": "path"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "canonical_url": {
            "type": "string",
            "format": "url"
          },
          "positive_reactions_count": {
            "type": "integer",
            "format": "int32"
          },
          "public_reactions_count": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "edited_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "crossposted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_comment_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_timestamp": {
            "description": "Crossposting or published date time",
            "type": "string",
            "format": "date-time"
          },
          "reading_time_minutes": {
            "description": "Reading time, in minutes",
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "$ref": "#/components/schemas/SharedUser"
          },
          "flare_tag": {
            "$ref": "#/components/schemas/ArticleFlareTag"
          },
          "organization": {
            "$ref": "#/components/schemas/SharedOrganization"
          }
        },
        "required": [
          "type_of",
          "id",
          "title",
          "description",
          "cover_image",
          "readable_publish_date",
          "social_image",
          "tag_list",
          "tags",
          "slug",
          "path",
          "url",
          "canonical_url",
          "comments_count",
          "positive_reactions_count",
          "public_reactions_count",
          "created_at",
          "edited_at",
          "crossposted_at",
          "published_at",
          "last_comment_at",
          "published_timestamp",
          "user",
          "reading_time_minutes"
        ]
      },
      "Article": {
        "description": "Representation of an Article to be created/updated",
        "type": "object",
        "properties": {
          "article": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "body_markdown": {
                "type": "string"
              },
              "published": {
                "type": "boolean",
                "default": false
              },
              "series": {
                "type": "string",
                "nullable": true
              },
              "main_image": {
                "type": "string",
                "nullable": true
              },
              "canonical_url": {
                "type": "string",
                "nullable": true
              },
              "description": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "organization_id": {
                "type": "integer",
                "nullable": true
              }
            }
          }
        }
      },
      "PodcastEpisodeIndex": {
        "description": "Representation of a podcast episode returned in a list",
        "type": "object",
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "class_name": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "format": "path"
          },
          "title": {
            "type": "string"
          },
          "image_url": {
            "description": "Podcast episode image url or podcast image url",
            "type": "string",
            "format": "url"
          },
          "podcast": {
            "$ref": "#/components/schemas/SharedPodcast"
          }
        },
        "required": [
          "type_of",
          "class_name",
          "id",
          "path",
          "title",
          "image_url",
          "podcast"
        ]
      },
      "ProfileImage": {
        "description": "A profile image object",
        "type": "object",
        "properties": {
          "type_of": {
            "description": "Return profile_image",
            "type": "string"
          },
          "image_of": {
            "description": "Determines the type of the profile image owner (user or organization)",
            "type": "string"
          },
          "profile_image": {
            "description": "Profile image (640x640)",
            "type": "string"
          },
          "profile_image_90": {
            "description": "Profile image (90x90)",
            "type": "string"
          }
        }
      },
      "SharedUser": {
        "description": "The resource creator",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "twitter_username": {
            "type": "string",
            "nullable": true
          },
          "github_username": {
            "type": "string",
            "nullable": true
          },
          "website_url": {
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "profile_image": {
            "description": "Profile image (640x640)",
            "type": "string"
          },
          "profile_image_90": {
            "description": "Profile image (90x90)",
            "type": "string"
          }
        }
      },
      "SharedOrganization": {
        "description": "The organization the resource belongs to",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "profile_image": {
            "description": "Profile image (640x640)",
            "type": "string",
            "format": "url"
          },
          "profile_image_90": {
            "description": "Profile image (90x90)",
            "type": "string",
            "format": "url"
          }
        }
      },
      "SharedPodcast": {
        "description": "The podcast that the resource belongs to",
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "image_url": {
            "description": "Podcast image url",
            "type": "string",
            "format": "url"
          }
        }
      }
    }
  }
}
