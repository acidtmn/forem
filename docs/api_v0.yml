openapi: '3.0.2'
info:
  title: DEV API
  description: Access DEV articles, comments and other resources via API
  version: '0.5.0'
  termsOfService: https://dev.to/terms
  contact:
    name: DEV Team
    url: https://dev.to/contact
    email: yo@dev.to

servers:
  - url: https://dev.to/api
    description: Production server

components:
  schemas:
    Article:
      type: object
      required:
        - type_of
        - id
        - title
        - description
        - cover_image
        - published_at
        - tag_list
        - slug
        - path
        - url
        - canonical_url
        - positive_reactions_count
        - published_timestamp
        - user
      properties:
        type_of:
          type: string
        id:
          type: integer
          format: int32
        title:
          type: string
        description:
          type: string
        cover_image:
          type: string
          format: url
        published_at:
          type: string
          format: date-time
        tag_list:
          type: array
          items:
            type: string
        slug:
          type: string
        path:
          type: string
          format: path
        url:
          type: string
          format: url
        canonical_url:
          type: string
          format: url
        positive_reactions_count:
          type: integer
          format: int32
        published_timestamp:
          description: Crossposting or published date time
          type: string
          format: date-time
        user:
          type: object
          properties:
            name:
              type: string
            username:
              type: string
            twitter_username:
              type: string
            github_username:
              type: string
            website_url:
              type: string
              format: url
            profile_image:
              description: Profile image (640x640)
              type: string
            profile_image_90:
              description: Profile image (90x90)
              type: string
        organization:
          description: Organization the article belongs to
          type: object
          properties:
            name:
              type: string
            username:
              type: string
            slug:
              type: string
            profile_image:
              description: Profile image (640x640)
              type: string
            profile_image_90:
              description: Profile image (90x90)
              type: string
        flare_tag:
          description: Flare tag of the article
          type: object
          properties:
            name:
              type: string
            bg_color_hex:
              description: Background color (hexadecimal)
              type: string
            text_color_hex:
              description: Text color (hexadecimal)
              type: string

paths:
  /articles:
    get:
      summary: Returns published articles
      description: |
        This endpoint allows the client to retrieve a list of articles.

        By default it will return featured articles ordered by descending
        popularity.

        Each page will contain `30` articles.

        Responses, according to the combination of params, are cached for 24 hours.
      tags:
        - articles
      parameters:
        - name: page
          in: query
          description: |
            Pagination page.

            This param can be used in conjuction with all other params
            (except when asking for fresh and rising articles by themselves).
          schema:
            type: integer
            format: int32
          example: 1
        - name: tag
          in: query
          description: |
            Adding this parameter will return articles that contain the
            requested tag.

            This param can be used by itself, with `page` or with `top`.
          schema:
            type: string
          example: discuss
        - name: username
          in: query
          description: |
            Adding this parameter will return articles belonging to a User or Organization
            ordered by descending `published_at`.

            If `state=all` the number of items returned will be `1000` instead of the default `30`.

            This param can be used by itself or only with `page` and `state`.
          schema:
            type: string
          example: ben
        - name: state
          in: query
          description: |
            Adding this will allow the client to check which articles are fresh or rising.

            If `state=fresh` the server will return published fresh articles.
            If `state=rising` the server will return published rising articles.

            This param can only be used by itself or with `username` if set to `all`.
          schema:
            type: string
          example: ben
        - name: top
          in: query
          description: |
            Adding this will allow the client to return the most popular articles
            in the last `N` days.

            `top` indicates the number of days since publication of the articles
            returned.

            This param can only be used by itself or with `tag`.
          schema:
            type: integer
            format: int32
          example: 2

      responses:
        '200':
          description: A list of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
              examples:
                articles-success:
                  summary: Successful response
                  value:
                  - type_of: article
                    id: 12345
                    title: 'Byte Sized Episode 2: The Creation of Graph Theory'
                    description: The full story of Leonhard Euler and the creation of this fundamental
                      computer science principle, delivered in a few minutes.
                    cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--qgutBUrH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png
                    published_at: '2019-08-01T15:47:54.000Z'
                    tag_list:
                    - computerscience
                    - graphtheory
                    - bytesized
                    - history
                    slug: byte-sized-episode-2-the-creation-of-graph-theory-34g1
                    path: "/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1"
                    url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
                    canonical_url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
                    comments_count: 15
                    positive_reactions_count: 210
                    published_timestamp: '2019-08-01T15:47:54Z'
                    user:
                      name: Vaidehi Joshi
                      username: vaidehijoshi
                      twitter_username: vaidehijoshi
                      github_username: vaidehijoshi
                      website_url: http://www.vaidehi.com
                      profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--eDGAYAoK--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg
                      profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--htZnqMn3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg
                    organization:
                      name: Byte Sized
                      username: bytesized
                      slug: bytesized
                      profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--sq0DrZfn--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png
                      profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--1Pt_ICL---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png
